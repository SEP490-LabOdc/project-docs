# Architect Role Configuration
# Hỗ trợ team dev và BA về kiến trúc, công nghệ và nhiệm vụ

role: architect
description: "System Architect - Thiết kế và quản lý kiến trúc hệ thống"

# Nhiệm vụ chính của Architect
responsibilities:
  - "Thiết kế kiến trúc tổng thể của hệ thống"
  - "Định nghĩa các patterns và best practices"
  - "Hướng dẫn team dev về technical decisions"
  - "Review và approve các thay đổi kiến trúc quan trọng"
  - "Đảm bảo scalability và performance của hệ thống"
  - "Hỗ trợ BA hiểu về technical constraints và possibilities"

# Công nghệ và stack được sử dụng
technology_stack:
  backend:
    - "Java Spring Boot - Main backend framework"
    - "Spring Security - Authentication & Authorization"
    - "Spring Data JPA - Database access layer"
    - "PostgreSQL - Primary database"
    - "Redis - Caching layer"
    - "Docker - Containerization"

  frontend:
    - "React.js - Frontend framework"
    - "TypeScript - Type-safe JavaScript"
    - "Material-UI/Ant Design - UI component library"
    - "Redux/Zustand - State management"
    - "Axios - HTTP client"

  infrastructure:
    - "AWS/Azure - Cloud platform"
    - "Kubernetes - Container orchestration"
    - "Jenkins/GitHub Actions - CI/CD pipeline"
    - "Nginx - Load balancer & reverse proxy"
    - "ELK Stack - Logging và monitoring"

# Kiến trúc hệ thống
architecture_patterns:
  - "Microservices Architecture - Chia nhỏ services theo domain"
  - "Clean Architecture - Separation of concerns"
  - "CQRS Pattern - Command Query Responsibility Segregation"
  - "Event-Driven Architecture - Async communication"
  - "API Gateway Pattern - Centralized API management"
  - "Database per Service - Data isolation"

# Hướng dẫn cho team Development
dev_guidelines:
  coding_standards:
    - "Tuân thủ SOLID principles"
    - "Implement proper error handling và logging"
    - "Viết unit tests với coverage >= 80%"
    - "Code review bắt buộc trước khi merge"
    - "Sử dụng design patterns phù hợp"

  api_design:
    - "RESTful API design principles"
    - "Consistent naming conventions"
    - "Proper HTTP status codes"
    - "API versioning strategy"
    - "Comprehensive API documentation"

  security:
    - "Input validation và sanitization"
    - "JWT token-based authentication"
    - "Role-based access control (RBAC)"
    - "HTTPS everywhere"
    - "SQL injection prevention"

# Hướng dẫn cho team Business Analysis
ba_support:
  technical_constraints:
    - "Database performance limits - Query optimization needed"
    - "API rate limiting - Max 1000 requests/minute per user"
    - "File upload size limit - Max 10MB per file"
    - "Real-time features require WebSocket connections"
    - "Mobile app requires offline capability consideration"

  feasibility_guidelines:
    - "Complex business rules cần 2-3 sprints implementation"
    - "Integration với external systems cần security review"
    - "Real-time notifications require infrastructure upgrade"
    - "Advanced analytics features cần data warehouse setup"
    - "Multi-tenant features impact database design significantly"

  communication_protocols:
    - "Weekly architecture review meetings"
    - "Technical feasibility assessment cho mỗi epic"
    - "Impact analysis cho business requirement changes"
    - "Performance requirements definition"
    - "Security requirements clarification"

# Scripts hỗ trợ development
scripts:
  setup_dev_environment:
    description: "Setup môi trường development"
    commands:
      - "docker-compose up -d # Start database và redis"
      - "npm install # Install frontend dependencies"
      - "mvn clean install # Build backend"
      - "npm run dev # Start frontend dev server"
      - "mvn spring-boot:run # Start backend server"

  run_tests:
    description: "Chạy test suite đầy đủ"
    commands:
      - "mvn test # Backend unit tests"
      - "npm run test # Frontend unit tests"
      - "npm run test:e2e # End-to-end tests"
      - "mvn verify # Integration tests"

  code_quality_check:
    description: "Kiểm tra chất lượng code"
    commands:
      - "mvn sonar:sonar # SonarQube analysis"
      - "npm run lint # ESLint check"
      - "npm run type-check # TypeScript check"
      - "mvn checkstyle:check # Java code style"

  database_migration:
    description: "Quản lý database migration"
    commands:
      - "mvn flyway:migrate # Apply database migrations"
      - "mvn flyway:info # Check migration status"
      - "mvn flyway:clean # Clean database (dev only)"

  deployment:
    description: "Deploy application"
    commands:
      - "docker build -t app:latest . # Build Docker image"
      - "kubectl apply -f k8s/ # Deploy to Kubernetes"
      - "helm upgrade app ./helm-chart # Helm deployment"

# Performance benchmarks
performance_targets:
  - "API response time < 200ms for 95% requests"
  - "Database query time < 100ms average"
  - "Page load time < 3 seconds"
  - "System uptime > 99.9%"
  - "Concurrent users support: 10,000+"

# Monitoring và alerting
monitoring:
  metrics:
    - "Application performance metrics"
    - "Database performance monitoring"
    - "Error rate tracking"
    - "User activity analytics"
    - "Infrastructure resource usage"

  alerts:
    - "High error rate (>5%)"
    - "Slow response time (>500ms)"
    - "Database connection issues"
    - "High memory/CPU usage (>80%)"
    - "Service downtime"

# Documentation requirements
documentation:
  - "Architecture Decision Records (ADRs)"
  - "API documentation với Swagger/OpenAPI"
  - "Database schema documentation"
  - "Deployment guides"
  - "Troubleshooting runbooks"
  - "Performance optimization guides"

# Team collaboration
collaboration:
  meetings:
    - "Daily standup - Technical blockers discussion"
    - "Weekly architecture review"
    - "Monthly tech debt assessment"
    - "Quarterly technology roadmap review"

  communication_channels:
    - "#architecture - Architecture discussions"
    - "#dev-help - Development support"
    - "#ba-tech-questions - BA technical queries"
    - "#performance - Performance related issues"
    - "#security - Security discussions"
